// Sources flattened with hardhat v2.19.2 https://hardhat.org

// SPDX-License-Identifier: MIT AND MPL-2.0 AND UNLICENSED

pragma abicoder v2;

// File contracts/C.sol

pragma solidity ^0.8.19;

contract C {}


// File contracts/B.sol

// Original license: SPDX_License_Identifier: MPL-2.0

pragma solidity ^0.8.19;

contract B {
    uint public x;

    function inc() public {
        x++;
    }
}


// File contracts/A.sol

// Original license: SPDX_License_Identifier: MIT

// Original pragma directive: pragma abicoder v2
pragma solidity ^0.8.19;

contract A {
    uint256 private storedData;

    function set(uint256 value) public {
        storedData = value;
    }

    function get() public view returns (uint256) {
        return storedData;
    }
}


// File contracts/Lock.sol

// Original license: SPDX_License_Identifier: UNLICENSED
pragma solidity ^0.8.19;

// Uncomment this line to use console.log
// import "hardhat/console.sol";

contract Lock {
    uint public unlockTime;
    address payable public owner;

    event Withdrawal(uint amount, uint when);

    constructor(uint _unlockTime) payable {
        require(
            block.timestamp < _unlockTime,
            "Unlock time should be in the future"
        );

        unlockTime = _unlockTime;
        owner = payable(msg.sender);
    }

    function withdraw() public {
        // Uncomment this line, and the import of "hardhat/console.sol", to print a log in your terminal
        // console.log("Unlock time is %o and block timestamp is %o", unlockTime, block.timestamp);

        require(block.timestamp >= unlockTime, "You can't withdraw yet");
        require(msg.sender == owner, "You aren't the owner");

        emit Withdrawal(address(this).balance, block.timestamp);

        owner.transfer(address(this).balance);
    }
}
