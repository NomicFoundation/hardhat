{
  "contracts": {
    "literal.sol": {
      "Nine": {
        "abi": [
          {
            "inputs": [],
            "name": "returnNine",
            "outputs": [
              {
                "internalType": "int256",
                "name": "",
                "type": "int256"
              }
            ],
            "stateMutability": "pure",
            "type": "function"
          }
        ],
        "evm": {
          "bytecode": {
            "generatedSources": [],
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b5060b68061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063df78ca5114602d575b600080fd5b60336047565b604051603e9190605d565b60405180910390f35b60006009905090565b6057816076565b82525050565b6000602082019050607060008301846050565b92915050565b600081905091905056fea2646970667358221220e7cab788146024c85c2e10b3c4e75886f12897ba5cbb11977003230b6e9f4bbd64736f6c63430008000033",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB6 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDF78CA51 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0x5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x9 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x57 DUP2 PUSH1 0x76 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x70 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xCA 0xB7 DUP9 EQ PUSH1 0x24 0xC8 0x5C 0x2E LT 0xB3 0xC4 0xE7 PC DUP7 CALL 0x28 SWAP8 0xBA 0x5C 0xBB GT SWAP8 PUSH17 0x3230B6E9F4BBD64736F6C634300080000 CALLER ",
            "sourceMap": "13:107:0:-:0;;;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "generatedSources": [
              {
                "ast": {
                  "nodeType": "YulBlock",
                  "src": "0:431:1",
                  "statements": [
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "70:52:1",
                        "statements": [
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "pos",
                                  "nodeType": "YulIdentifier",
                                  "src": "87:3:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "value",
                                      "nodeType": "YulIdentifier",
                                      "src": "109:5:1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "cleanup_t_int256",
                                    "nodeType": "YulIdentifier",
                                    "src": "92:16:1"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "92:23:1"
                                }
                              ],
                              "functionName": {
                                "name": "mstore",
                                "nodeType": "YulIdentifier",
                                "src": "80:6:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "80:36:1"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "80:36:1"
                          }
                        ]
                      },
                      "name": "abi_encode_t_int256_to_t_int256_fromStack",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "58:5:1",
                          "type": ""
                        },
                        {
                          "name": "pos",
                          "nodeType": "YulTypedName",
                          "src": "65:3:1",
                          "type": ""
                        }
                      ],
                      "src": "7:115:1"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "224:122:1",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "234:26:1",
                            "value": {
                              "arguments": [
                                {
                                  "name": "headStart",
                                  "nodeType": "YulIdentifier",
                                  "src": "246:9:1"
                                },
                                {
                                  "kind": "number",
                                  "nodeType": "YulLiteral",
                                  "src": "257:2:1",
                                  "type": "",
                                  "value": "32"
                                }
                              ],
                              "functionName": {
                                "name": "add",
                                "nodeType": "YulIdentifier",
                                "src": "242:3:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "242:18:1"
                            },
                            "variableNames": [
                              {
                                "name": "tail",
                                "nodeType": "YulIdentifier",
                                "src": "234:4:1"
                              }
                            ]
                          },
                          {
                            "expression": {
                              "arguments": [
                                {
                                  "name": "value0",
                                  "nodeType": "YulIdentifier",
                                  "src": "312:6:1"
                                },
                                {
                                  "arguments": [
                                    {
                                      "name": "headStart",
                                      "nodeType": "YulIdentifier",
                                      "src": "325:9:1"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "336:1:1",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "321:3:1"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "321:17:1"
                                }
                              ],
                              "functionName": {
                                "name": "abi_encode_t_int256_to_t_int256_fromStack",
                                "nodeType": "YulIdentifier",
                                "src": "270:41:1"
                              },
                              "nodeType": "YulFunctionCall",
                              "src": "270:69:1"
                            },
                            "nodeType": "YulExpressionStatement",
                            "src": "270:69:1"
                          }
                        ]
                      },
                      "name": "abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "headStart",
                          "nodeType": "YulTypedName",
                          "src": "196:9:1",
                          "type": ""
                        },
                        {
                          "name": "value0",
                          "nodeType": "YulTypedName",
                          "src": "208:6:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "tail",
                          "nodeType": "YulTypedName",
                          "src": "219:4:1",
                          "type": ""
                        }
                      ],
                      "src": "128:218:1"
                    },
                    {
                      "body": {
                        "nodeType": "YulBlock",
                        "src": "396:32:1",
                        "statements": [
                          {
                            "nodeType": "YulAssignment",
                            "src": "406:16:1",
                            "value": {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "417:5:1"
                            },
                            "variableNames": [
                              {
                                "name": "cleaned",
                                "nodeType": "YulIdentifier",
                                "src": "406:7:1"
                              }
                            ]
                          }
                        ]
                      },
                      "name": "cleanup_t_int256",
                      "nodeType": "YulFunctionDefinition",
                      "parameters": [
                        {
                          "name": "value",
                          "nodeType": "YulTypedName",
                          "src": "378:5:1",
                          "type": ""
                        }
                      ],
                      "returnVariables": [
                        {
                          "name": "cleaned",
                          "nodeType": "YulTypedName",
                          "src": "388:7:1",
                          "type": ""
                        }
                      ],
                      "src": "352:76:1"
                    }
                  ]
                },
                "contents": "{\n\n    function abi_encode_t_int256_to_t_int256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_int256(value))\n    }\n\n    function abi_encode_tuple_t_int256__to_t_int256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_int256_to_t_int256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_int256(value) -> cleaned {\n        cleaned := value\n    }\n\n}\n",
                "id": 1,
                "language": "Yul",
                "name": "#utility.yul"
              }
            ],
            "immutableReferences": {},
            "linkReferences": {},
            "object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063df78ca5114602d575b600080fd5b60336047565b604051603e9190605d565b60405180910390f35b60006009905090565b6057816076565b82525050565b6000602082019050607060008301846050565b92915050565b600081905091905056fea2646970667358221220e7cab788146024c85c2e10b3c4e75886f12897ba5cbb11977003230b6e9f4bbd64736f6c63430008000033",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xDF78CA51 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0x5D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH1 0x9 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x57 DUP2 PUSH1 0x76 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0x70 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x50 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE7 0xCA 0xB7 DUP9 EQ PUSH1 0x24 0xC8 0x5C 0x2E LT 0xB3 0xC4 0xE7 PC DUP7 CALL 0x28 SWAP8 0xBA 0x5C 0xBB GT SWAP8 PUSH17 0x3230B6E9F4BBD64736F6C634300080000 CALLER ",
            "sourceMap": "13:107:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;45:61;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;88:3;102:1;95:8;;45:61;:::o;7:115:1:-;92:23;109:5;92:23;:::i;:::-;87:3;80:36;70:52;;:::o;128:218::-;;257:2;246:9;242:18;234:26;;270:69;336:1;325:9;321:17;312:6;270:69;:::i;:::-;224:122;;;;:::o;352:76::-;;417:5;406:16;;396:32;;;:::o"
          },
          "methodIdentifiers": {
            "returnNine()": "df78ca51"
          }
        }
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "errorCode": "1878",
      "formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> literal.sol\n\n",
      "message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
      "severity": "warning",
      "sourceLocation": {
        "end": -1,
        "file": "literal.sol",
        "start": -1
      },
      "type": "Warning"
    },
    {
      "component": "general",
      "errorCode": "3420",
      "formattedMessage": "Warning: Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.0;\"\n--> literal.sol\n\n",
      "message": "Source file does not specify required compiler version! Consider adding \"pragma solidity ^0.8.0;\"",
      "severity": "warning",
      "sourceLocation": {
        "end": -1,
        "file": "literal.sol",
        "start": -1
      },
      "type": "Warning"
    }
  ],
  "sources": {
    "literal.sol": {
      "ast": {
        "absolutePath": "literal.sol",
        "exportedSymbols": {
          "Nine": [
            9
          ]
        },
        "id": 10,
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "abstract": false,
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "fullyImplemented": true,
            "id": 9,
            "linearizedBaseContracts": [
              9
            ],
            "name": "Nine",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 7,
                  "nodeType": "Block",
                  "src": "93:13:0",
                  "statements": [
                    {
                      "expression": {
                        "hexValue": "39",
                        "id": 5,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "number",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "102:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_rational_9_by_1",
                          "typeString": "int_const 9"
                        },
                        "value": "9"
                      },
                      "functionReturnParameters": 4,
                      "id": 6,
                      "nodeType": "Return",
                      "src": "95:8:0"
                    }
                  ]
                },
                "functionSelector": "df78ca51",
                "id": 8,
                "implemented": true,
                "kind": "function",
                "modifiers": [],
                "name": "returnNine",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "64:2:0"
                },
                "returnParameters": {
                  "id": 4,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 3,
                      "mutability": "mutable",
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 8,
                      "src": "88:3:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_int256",
                        "typeString": "int256"
                      },
                      "typeName": {
                        "id": 2,
                        "name": "int",
                        "nodeType": "ElementaryTypeName",
                        "src": "88:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_int256",
                          "typeString": "int256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "src": "87:5:0"
                },
                "scope": 9,
                "src": "45:61:0",
                "stateMutability": "pure",
                "virtual": false,
                "visibility": "public"
              }
            ],
            "scope": 10,
            "src": "13:107:0"
          }
        ],
        "src": "13:118:0"
      },
      "id": 0
    }
  }
}
