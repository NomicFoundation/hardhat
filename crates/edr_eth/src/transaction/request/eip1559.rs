use std::sync::OnceLock;

use k256::SecretKey;
use revm_primitives::{keccak256, Address, Bytes, B256, U256};

use crate::{
    access_list::AccessListItem,
    signature::{Signature, SignatureError},
    transaction::{
        kind::TransactionKind, request::fake_signature::make_fake_signature,
        signed::Eip1559SignedTransaction,
    },
    utils::envelop_bytes,
};

#[derive(Debug, Clone, PartialEq, Eq)]
#[cfg_attr(
    feature = "fastrlp",
    derive(open_fastrlp::RlpEncodable, open_fastrlp::RlpDecodable)
)]
pub struct Eip1559TransactionRequest {
    pub chain_id: u64,
    pub nonce: u64,
    pub max_priority_fee_per_gas: U256,
    pub max_fee_per_gas: U256,
    pub gas_limit: u64,
    pub kind: TransactionKind,
    pub value: U256,
    pub input: Bytes,
    pub access_list: Vec<AccessListItem>,
}

impl Eip1559TransactionRequest {
    /// Computes the hash of the transaction.
    pub fn hash(&self) -> B256 {
        let encoded = rlp::encode(self);

        keccak256(&envelop_bytes(2, &encoded))
    }

    pub fn sign(self, secret_key: &SecretKey) -> Result<Eip1559SignedTransaction, SignatureError> {
        let hash = self.hash();

        let signature = Signature::new(hash, secret_key)?;

        Ok(Eip1559SignedTransaction {
            chain_id: self.chain_id,
            nonce: self.nonce,
            max_priority_fee_per_gas: self.max_priority_fee_per_gas,
            max_fee_per_gas: self.max_fee_per_gas,
            gas_limit: self.gas_limit,
            kind: self.kind,
            value: self.value,
            input: self.input,
            access_list: self.access_list.into(),
            odd_y_parity: signature.odd_y_parity(),
            r: signature.r,
            s: signature.s,
            hash: OnceLock::new(),
        })
    }

    pub fn fake_sign(self, sender: &Address) -> Eip1559SignedTransaction {
        let signature = make_fake_signature::<1>(sender);

        Eip1559SignedTransaction {
            chain_id: self.chain_id,
            nonce: self.nonce,
            max_priority_fee_per_gas: self.max_priority_fee_per_gas,
            max_fee_per_gas: self.max_fee_per_gas,
            gas_limit: self.gas_limit,
            kind: self.kind,
            value: self.value,
            input: self.input,
            access_list: self.access_list.into(),
            odd_y_parity: signature.odd_y_parity(),
            r: signature.r,
            s: signature.s,
            hash: OnceLock::new(),
        }
    }
}

impl From<&Eip1559SignedTransaction> for Eip1559TransactionRequest {
    fn from(t: &Eip1559SignedTransaction) -> Self {
        Self {
            chain_id: t.chain_id,
            nonce: t.nonce,
            max_priority_fee_per_gas: t.max_priority_fee_per_gas,
            max_fee_per_gas: t.max_fee_per_gas,
            gas_limit: t.gas_limit,
            kind: t.kind,
            value: t.value,
            input: t.input.clone(),
            access_list: t.access_list.0.clone(),
        }
    }
}

impl rlp::Encodable for Eip1559TransactionRequest {
    fn rlp_append(&self, s: &mut rlp::RlpStream) {
        s.begin_list(9);
        s.append(&self.chain_id);
        s.append(&self.nonce);
        s.append(&self.max_priority_fee_per_gas);
        s.append(&self.max_fee_per_gas);
        s.append(&self.gas_limit);
        s.append(&self.kind);
        s.append(&self.value);
        s.append(&self.input.as_ref());
        s.append_list(&self.access_list);
    }
}

#[cfg(test)]
pub(crate) mod tests {
    use std::str::FromStr;

    use revm_primitives::Address;

    use super::*;
    use crate::transaction::request::fake_signature::tests::test_fake_sign_properties;

    fn dummy_request() -> Eip1559TransactionRequest {
        let to = Address::from_str("0xc014ba5ec014ba5ec014ba5ec014ba5ec014ba5e").unwrap();
        let input = hex::decode("1234").unwrap();
        Eip1559TransactionRequest {
            chain_id: 1,
            nonce: 1,
            max_priority_fee_per_gas: U256::from(2),
            max_fee_per_gas: U256::from(5),
            gas_limit: 3,
            kind: TransactionKind::Call(to),
            value: U256::from(4),
            input: Bytes::from(input),
            access_list: vec![AccessListItem {
                address: Address::zero(),
                storage_keys: vec![B256::zero(), B256::from(U256::from(1))],
            }],
        }
    }

    #[test]
    fn test_eip1559_transaction_request_encoding() {
        // Generated by Hardhat
        // QUESTION: What is considered a valid RLP-encoding? With the prepending type?
        // or without?
        let expected =
            hex::decode("f87b010102050394c014ba5ec014ba5ec014ba5ec014ba5ec014ba5e04821234f85bf859940000000000000000000000000000000000000000f842a00000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001")
                .unwrap();

        let request = dummy_request();

        let encoded = rlp::encode(&request);
        assert_eq!(expected, encoded.to_vec());
    }

    #[test]
    fn test_eip1559_transaction_request_encoding_empty() {
        // Generated by Hardhat
        let expected = hex::decode("c90180808080808080c0").unwrap();

        let empty = Eip1559TransactionRequest {
            chain_id: 1,
            nonce: 0,
            max_priority_fee_per_gas: U256::ZERO,
            max_fee_per_gas: U256::ZERO,
            gas_limit: 0,
            kind: TransactionKind::Create,
            value: U256::ZERO,
            input: Bytes::new(),
            access_list: vec![],
        };

        let encoded = rlp::encode(&empty);
        assert_eq!(expected, encoded.to_vec());
    }

    #[test]
    fn test_eip1559_transaction_request_hash() {
        // Generated by hardhat
        let expected = B256::from_slice(
            &hex::decode("1d21c520c93f0f8e07c2466361b22a8bb9906cdbf4670e53a701c075bbe69ecf")
                .unwrap(),
        );

        let request = dummy_request();
        assert_eq!(expected, request.hash());
    }

    test_fake_sign_properties!();

    #[test]
    fn test_fake_sign_test_vector() -> anyhow::Result<()> {
        let transaction = Eip1559TransactionRequest {
            chain_id: 123,
            nonce: 0,
            max_priority_fee_per_gas: U256::from(2),
            max_fee_per_gas: U256::from(12),
            gas_limit: 30_000,
            kind: TransactionKind::Call("0xb5bc06d4548a3ac17d72b372ae1e416bf65b8ead".parse()?),
            value: U256::from(1),
            input: Bytes::default(),
            access_list: vec![],
        };

        let fake_sender: Address = "0xa5bc06d4548a3ac17d72b372ae1e416bf65b8ead".parse()?;

        let signed = transaction.fake_sign(&fake_sender);

        // Generated by Hardhat
        let expected_hash: B256 =
            "ee788ad79d536e2e5146e26b3be0bd12ee4de921c22b3295de3ee16395a015e0".parse()?;
        assert_eq!(signed.hash(), &expected_hash);

        Ok(())
    }
}
